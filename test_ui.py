# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import time
import logging
import bot
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import sys
from signal import signal, SIGINT
from sys import exit


class MainWidget(QWidget):
    def __init__(self, parent =None):
        super(MainWidget, self).__init__(parent)
        self.setWindowTitle("QThread Example")

        self.thread = Worker()

        self.listFile = QListWidget()
        self.btnStart = QPushButton("start")
        self.btnStop = QPushButton("stop")

        layout = QGridLayout(self)
        layout.addWidget(self.listFile)
        layout.addWidget(self.btnStart)
        layout.addWidget(self.btnStop)
        #layout.addWidget(self.btnStop,1,3)

        self.btnStart.clicked.connect(self.slotStart)
        self.btnStop.clicked.connect(self.slotStop)
        #self.thread.sinout.connect(self.slotAdd)

        self.btnStop.setEnabled(False)

    def slotStart(self):
        self.btnStart.setEnabled(False)
        #self.thread.start()
        self.startExecuting()
        self.btnStop.setEnabled(True)

    def slotStop(self):
        self.btnStop.setEnabled(False)
        self.stopExecuting()
        self.btnStart.setEnabled(True)

    def slotAdd(self,file_inf):
        self.listFile.addItem(file_inf)

    def startExecuting(self):
        self.process = QProcess()
        self.process.setProcessChannelMode(QProcess.MergedChannels)
        self.process.start("python", ["-u", 'bot.py'])

    def stopExecuting(self):
        self.process.kill()

class Worker(QThread):
    sinout=  pyqtSignal(str)
    def __init__(self, parent = None):
        super(Worker,self).__init__(parent)
        self.working = True
        self.num = 0


    def __del__(self):
        self.working = False
        self.wait()

    def stop(self):
        self.working = False
        self.wait()

    def run(self):

        self.raid = bot.Raider(account='raid3', leveling=True, dungeon='spider', dt_difficulty='hard', action_one_time=False, gem_refill=False, star_leveling=3)
        if self.working == True:
            file_str = f"trying action...{self.raid.actions}"
            self.sinout.emit(file_str)
            self.raid.main_loop()
            # Transmitting signal
            
            # Thread hibernates for 2 seconds
            self.sleep(30)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    demo = MainWidget()
    demo.show()
    sys.exit(app.exec_())